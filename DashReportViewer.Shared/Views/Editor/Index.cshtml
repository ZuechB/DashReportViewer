@model DashReportViewer.Shared.Models.Reporting.ReportViewModel

@{
	Layout = "~/Views/Shared/_ReportLayout.cshtml";
	ViewData["Title"] = "Welcome to DashReportViewer";
	ViewData["disableFilter"] = true;
	ViewData["KioskMode"] = false;
}

<link href="~/editor/editor.main.css" rel="stylesheet" type="text/css">
<link data-inline="yes-please" href="~/editor/monarch/monarch.css" rel="stylesheet" />


<div class="container" style="max-width:unset; padding-left:unset; padding-right:unset;">
	<div class="row">
		<div class="col-md-12">

			<ul class="nav nav-tabs" id="myTab" role="tablist">
				<li class="nav-item">
					<a class="nav-link active" id="home-tab" data-toggle="tab" href="#home" role="tab" aria-controls="home" aria-selected="true">Editor</a>
				</li>
				<li class="nav-item">
					<a class="nav-link" id="profile-tab" data-toggle="tab" href="#profile" role="tab" aria-controls="profile" aria-selected="false">Preview</a>
				</li>
			</ul>
			<div class="tab-content" id="myTabContent">
				<div class="tab-pane fade show active" id="home" role="tabpanel" aria-labelledby="home-tab">


					<div>
						<section class="try">
							<div class="container" style="max-width:unset; padding-left:unset; padding-right:unset;">
								<div class="row">
									<div class="editor-frame col-md-12">
										<div class="loading editor" style="display: none;">
											<div class="progress progress-striped active">
												<div class="bar"></div>
											</div>
										</div>
										<div id="editor"></div>
									</div>
								</div>
							</div>
						</section>
					</div>


					<button id="btnSend">Save</button>


				</div>
				<div class="tab-pane fade" id="profile" role="tabpanel" aria-labelledby="profile-tab">
					<div style="padding:40px;">

						@await Component.InvokeAsync("ReportComponent", new { reportType = Guid.Parse("A21FDA13-F36F-4AF5-AC05-2A3DABAE04EF") })

					</div>
				</div>
			</div>

	</div>
</div>











	<input id="hTemplateUrl" type="hidden" value="/template/Sample.txt" />

























































@section Scripts
{
	<script type="text/javascript" src="/js/require.js"></script>

	<script type="text/javascript">
		$(document).ready(function ($) {
			$("#btnSend").click(function () {

				var value = window.editor.getValue();

				$.post("/Editor/Execute", {
					code: value
				}, function (data, status) {

                    window.location.reload(true);
				});

			});
		});
	</script>

	<script type="text/javascript">


		'use strict';
		require.config({
			baseUrl: 'https://microsoft.github.io/monaco-editor/node_modules/monaco-editor/min/'
		});

		var editor = null, diffEditor = null;

		$(document).ready(function () {
			require(['vs/editor/editor.main'], function () {
                loadSample();
			});

			window.onresize = function () {
				if (editor) {
					editor.layout();
				}
				if (diffEditor) {
					diffEditor.layout();
				}
			};
		});

        function loadSample() {

            let url = $("#hTemplateUrl").val();

			$.ajax({
				type: 'GET',
				url: url,
				dataType: 'text',
				beforeSend: function () {
					$('.loading.editor').show();
				},
				error: function () {
					if (editor) {
						if (editor.getModel()) {
							editor.getModel().dispose();
						}
						editor.dispose();
						editor = null;
					}
					$('.loading.editor').fadeOut({ duration: 200 });
					$('#editor').empty();
					$('#editor').append('<p class="alert alert-error">Failed to load ' + mode.modeId + ' sample</p>');
				}
			}).done(function (data) {
				if (!editor) {
					$('#editor').empty();
					editor = monaco.editor.create(document.getElementById('editor'), {
                        model: null,
						theme: "vs-dark",
					});
                }







				var oldModel = editor.getModel();
				var newModel = monaco.editor.createModel(data, "csharp");
				editor.setModel(newModel);
				if (oldModel) {
					oldModel.dispose();
				}
                $('.loading.editor').fadeOut({ duration: 300 });

				monaco.languages.register({ id: 'mySpecialLanguage' });


				// Register a completion item provider for the new language
				monaco.languages.registerCompletionItemProvider('mySpecialLanguage', {
					provideCompletionItems: () => {
						var suggestions = [{
							label: 'simpleText',
							kind: monaco.languages.CompletionItemKind.Text,
							insertText: 'simpleText'
						}, {
							label: 'testing',
							kind: monaco.languages.CompletionItemKind.Keyword,
							insertText: 'testing(${1:condition})',
							insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet
						}, {
							label: 'ifelse',
							kind: monaco.languages.CompletionItemKind.Snippet,
							insertText: [
								'if (${1:condition}) {',
								'\t$0',
								'} else {',
								'\t',
								'}'
							].join('\n'),
							insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
							documentation: 'If-Else Statement'
						}];
						return { suggestions: suggestions };
					}
				});







			});
		}

	</script>
}