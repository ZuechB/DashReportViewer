@model DashReportViewer.Models.Reporting.ReportViewModel
@{
    ViewData["Title"] = Model.ReportName;
}

<div class="mb-4">
    <div class="d-sm-flex align-items-center justify-content-between">
        <h1 class="h3 mb-0 text-gray-800">@Html.Raw(Model.ReportName)</h1>
        @*<a href="#" class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm"><i class="fas fa-download fa-sm text-white-50"></i> Generate Report</a>*@
    </div>
    <div>
        @if (!String.IsNullOrWhiteSpace(Model.ReportDescription))
        {
            <span style="font-size:16px;">@(Model.ReportDescription)</span>
        }
    </div>
</div>

@*<div class="row">
        <div class="col-md-12">
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Earnings Overview</h6>
                    <div class="dropdown no-arrow">
                        <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
                        </a>
                        <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in" aria-labelledby="dropdownMenuLink">
                            <div class="dropdown-header">Dropdown Header:</div>
                            <a class="dropdown-item" href="#">Action</a>
                            <a class="dropdown-item" href="#">Another action</a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item" href="#">Something else here</a>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="chart-area">
                        <canvas id="myAreaChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>*@



<div class="wrapper-content">
    <div class="ibox-content">
        <h1 class="headline m-top-md text-center">
            <span></span>
        </h1>

        @if (Model.HasData)
        {
            <table class="table table-striped table-hover" id="dataTable">
                <thead>
                    <tr>
                        @if (@Model.Columns != null)
                        {
                            foreach (var column in Model.Columns)
                            {
                                <th>@column</th>
                            }
                        }
                    </tr>
                </thead>
                <tbody>

                    @if (Model.Data != null)
                    {
                        foreach (var row in Model.Data)
                        {
                            <tr>
                                @foreach (var column in row)
                                {
                                    <td>@Html.Raw(column)</td>
                                }
                            </tr>
                        }
                    }
                    else
                    {
                        <text>No Results</text>
                    }

                </tbody>
            </table>
        }
    </div>
</div>





<div id="slider">
    <div>
        <div>
            Filters
        </div>

        @await Html.PartialAsync("Parameters", Model.Parameters)

        <div class="btnFilterContainer">
            <button id="btnApply" class="btn btn-primary">Apply Filters</button>
        </div>
    </div>
</div>

<input id="ReportType" type="hidden" value="@Model.UniqueID" />
<input id="ContentType" type="hidden" value="0" />

@section Scripts
{
    <script type="text/javascript">
        $(function () {

            var start = moment().subtract(29, 'days');
            var end = moment();

            function cb(start, end) {
                $('#reportrange span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'));

                console.log("A new date selection was made: " + start.format('YYYY-MM-DD') + ' to ' + end.format('YYYY-MM-DD'));
            }

            $('#reportrange').daterangepicker({
                startDate: start,
                endDate: end,
                ranges: {
                    'Today': [moment(), moment()],
                    'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                    'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                    'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                    'This Month': [moment().startOf('month'), moment().endOf('month')],
                    'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                }
            }, cb);

            cb(start, end);

        });

        $("#btnApply").click(function () {
            LoadReport();
        });

        function LoadReport() {
            var reportType = $("#ReportType").val();
            var contentType = $("#ContentType").val();

            var fields = $('.dashField').map(function () {
                return "[" + $(this).attr("name") + "~" + handleInput(this) + "]";
            }).get();

            var encoded = encodeURIComponent(fields);
            var url = "/report/reports?reportType=" + reportType + "&param=" + encoded + "&ContentType=" + contentType

            window.location = url;
        }

        function handleInput(input) {
            if ($(input).is(":checkbox")) {
                if ($(input).prop('checked')) {
                    return true;
                } else {
                    return false;
                }
            }
            return input.value;
        };

    </script>
}